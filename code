import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
# Load the data
df = pd.read_csv('/content/newdata.csv')

# Display the first few rows of the DataFrame
print(df.head())

# Get summary statistics of numerical columns
print(df.describe())

# Check for missing values
print(df.isnull().sum())

# Check data types of each column
print(df.dtypes)

# Drop rows with missing values
df.dropna(inplace=True)

# Convert 'InvoiceDate' column to datetime
df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])
import matplotlib.pyplot as plt
import seaborn as sns

# Plotting distributions of numeric features
sns.histplot(df['Quantity'], kde=True)
plt.title('Distribution of Quantity')
plt.show()

sns.histplot(df['Price'], kde=True)
plt.title('Distribution of Price')
plt.show()

# Sales by country
plt.figure(figsize=(10,6))
sns.countplot(y='Country', data=df)
plt.title('Sales by Country')
plt.show()
# Pairplot to visualize relationships between numerical variables
sns.pairplot(df)
plt.show()

# Plot distribution of 'Quantity' and 'Price'
sns.histplot(df['Quantity'], kde=True)
plt.show()

sns.histplot(df['Price'], kde=True)
plt.show()

# Visualize sales over time
df['InvoiceMonth'] = df['InvoiceDate'].dt.to_period('M')
monthly_sales = df.groupby('InvoiceMonth')['Quantity'].sum()
plt.plot(monthly_sales)
plt.xlabel('Month')
plt.ylabel('Total Quantity Sold')
plt.title('Monthly Sales')
plt.xticks(rotation=45)
plt.show()
# Extract year and month from InvoiceDate
df['Year'] = df['InvoiceDate'].dt.year
df['Month'] = df['InvoiceDate'].dt.month
# Adding total price
df['TotalPrice'] = df['Quantity'] * df['Price']
# Check unique values that are non-numeric in the 'Invoice' column
non_numeric_invoices = df[df['Invoice'].str.contains('[^0-9]+', regex=True)]['Invoice'].unique()
print(non_numeric_invoices)

# Do the same for 'StockCode'
non_numeric_stockcodes = df[df['StockCode'].str.contains('[^0-9]+', regex=True)]['StockCode'].unique()
print(non_numeric_stockcodes)
# Example to remove rows with non-numeric 'Invoice'
df = df[~df['Invoice'].str.contains('[^0-9]+', regex=True)]

# Convert to numeric now should be safe
df['Invoice'] = pd.to_numeric(df['Invoice'])
print(df.dtypes)
# Set 'StockCode' as a categorical variable if not already
df['StockCode'] = df['StockCode'].astype(str)
# Assuming 'Price' and 'Quantity' should be numeric, check and convert
df['Price'] = pd.to_numeric(df['Price'], errors='coerce')
df['Quantity'] = pd.to_numeric(df['Quantity'], errors='coerce')

# Drop rows where any essential numeric conversion failed
df.dropna(subset=['Price', 'Quantity'], inplace=True)
# Exclude 'InvoiceDate' from any numeric transformations
# Let's assume we're preparing features for machine learning and need to exclude 'InvoiceDate'

# First, ensure it's in datetime format
df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'], errors='coerce')

# Then, drop or convert this column before performing any numeric operations
# For instance, you might want to extract features from 'InvoiceDate'
df['InvoiceYear'] = df['InvoiceDate'].dt.year
df['InvoiceMonth'] = df['InvoiceDate'].dt.month
df['InvoiceDay'] = df['InvoiceDate'].dt.day
df['InvoiceHour'] = df['InvoiceDate'].dt.hour

# Now you can safely drop the original 'InvoiceDate' if it will not be used directly
df.drop('InvoiceDate', axis=1, inplace=True)
# Assuming we are preparing data for a regression model and using numeric columns only
from sklearn.model_selection import train_test_split
import numpy as np


# Assuming 'TotalPrice' is our target and it's calculated as follows
df['TotalPrice'] = df['Quantity'] * df['Price']

# Preparing feature matrix X by dropping non-numeric and target columns
X = df.select_dtypes(include=[np.number])  # This ensures only numeric columns are included

# Preparing target vector y
y = df['TotalPrice']

# Splitting the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
from sklearn.ensemble import RandomForestRegressor

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predicting
predictions = model.predict(X_test)
from sklearn.metrics import mean_squared_error

mse = mean_squared_error(y_test, predictions)
print(f'Mean Squared Error: {mse}')
